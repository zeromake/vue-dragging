{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 61f8dde00d094486b2fe","webpack:///./vue-dragging.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,8CAA8C,0CAA0C;AACxF;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,C","file":"vue-dragging.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VueDragging\"] = factory();\n\telse\n\t\troot[\"VueDragging\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 61f8dde00d094486b2fe","class DragData {\n    constructor () {\n        this.data = {}\n    }\n\n    new (key) {\n        if (!this.data[key]) {\n            this.data[key] = {\n                className: '',\n                Current: {\n                    index: 0,\n                    item: null,\n                    el: null\n                },\n                List: [],\n                KEY_MAP: {}\n            }\n        }\n        return this.data[key]\n    }\n\n    get (key) {\n        return this.data[key]\n    }\n}\nconst $dragging = {\n    listeners: {\n        dragged: [],\n        dragend: []\n    },\n    $on (event, func) {\n        this.listeners[event].push(func)\n    },\n    $once (event, func) {\n        const vm = this\n        function on () {\n            vm.$off(event, on)\n            func.apply(vm, arguments)\n        }\n        this.$on(event, on)\n    },\n    $off (event, func) {\n        if (!func) {\n            this.listeners[event] = []\n            return\n        }\n        this.listeners[event].$remove(func)\n    },\n    $emit (event, context) {\n        this.listeners[event].forEach(func => {\n            func(context)\n        })\n    }\n}\n\nconst _ = {\n    on (el, type, fn) {\n        el.addEventListener(type, fn)\n    },\n    off (el, type, fn) {\n        el.removeEventListener(type, fn)\n    },\n    addClass (el, cls) {\n        if(arguments.length < 2) {\n            el.classList.add(cls)\n        } else {\n            for (let i = 1, len = arguments.length; i < len; i++) {\n                el.classList.add(arguments[i])\n            }\n        }\n    },\n    removeClass (el, cls) {\n        if(arguments.length < 2) {\n            el.classList.remove(cls)\n        } else {\n            for (let i = 1, len = arguments.length; i < len; i++) {\n                el.classList.remove(arguments[i])\n            }\n        }\n    }\n}\n\nexport default function (Vue, options) {\n    const isPreVue = Vue.version.split('.')[0] === '1'\n    const dragData = new DragData()\n\n    function handleDragStart(e) {\n        const el = getBlockEl(e.target)\n        const key = el.getAttribute('drag_group')\n        const drag_key = el.getAttribute('drag_key')\n        const DDD = dragData.new(key)\n        const item = DDD.KEY_MAP[drag_key]\n        const index = DDD.List.indexOf(item)\n        _.addClass(el, 'dragging')\n\n        if (e.dataTransfer) {\n            e.dataTransfer.effectAllowed = 'move'\n            e.dataTransfer.setData('text', JSON.stringify(item))\n        }\n\n        DDD.Current = {\n            index: index,\n            item: item,\n            el: el\n        }\n    }\n\n    function handleDragOver(e) {\n        if (e.preventDefault) {\n            e.preventDefault()\n        }\n        return false\n    }\n\n    function handleDragEnter(e) {\n        let el\n        if (e.type === 'touchmove') {\n            e.stopPropagation()\n            e.preventDefault()\n            el = getOverElementFromTouch(e)\n            el = getBlockEl(el)\n        } else {\n            el = getBlockEl(e.target)\n        }\n\n        if (!el) return\n\n        const key = el.getAttribute('drag_group')\n        const drag_key = el.getAttribute('drag_key')\n        const DDD = dragData.new(key)\n\n        if (!DDD.Current.el || !DDD.Current.item) return\n\n        if (el === DDD.Current.el) return\n\n        let item = DDD.KEY_MAP[drag_key]\n        let indexTo = DDD.List.indexOf(item)\n        let indexFrom = DDD.List.indexOf(DDD.Current.item)\n\n        swapArrayElements(DDD.List, indexFrom, indexTo)\n\n        DDD.Current.index = indexTo\n\n        $dragging.$emit('dragged', {\n            draged: DDD.Current.item, \n            to: item, \n            value: DDD.value\n        })\n    }\n\n    function handleDragLeave(e) {\n        _.removeClass(getBlockEl(e.target), 'drag-over', 'drag-enter')\n    }\n\n    function handleDrag (e) {\n    }\n\n    function handleDragEnd (e) {\n        _.removeClass(getBlockEl(e.target), 'dragging', 'drag-over', 'drag-enter')\n        $dragging.$emit('dragend')\n    }\n\n    function handleDrop(e) {\n        e.preventDefault()\n        if (e.stopPropagation) {\n            e.stopPropagation()\n        }\n        return false\n    }\n\n    function getBlockEl (el) {\n        if (!el) return\n        while (el.parentNode) {\n            if (el.getAttribute && el.getAttribute('drag_block')) {\n                return el\n                break\n            } else {\n                el = el.parentNode\n            }\n        }\n    }\n\n    function swapArrayElements (items, indexFrom, indexTo) {\n        let item = items[indexTo]\n        if (isPreVue) {\n            items.$set(indexTo, items[indexFrom])\n            items.$set(indexFrom, item)\n        } else {\n            Vue.set(items, indexTo, items[indexFrom])\n            Vue.set(items, indexFrom, item)\n        }\n        return items\n    }\n\n    function getOverElementFromTouch (e) {\n        const touch = e.touches[0]\n        const el = document.elementFromPoint(touch.clientX, touch.clientY)\n        return el\n    }\n\n    function addDragItem (el, binding, vnode) {\n        const item = binding.value.item\n        const list = binding.value.list\n        const DDD = dragData.new(binding.value.group)\n\n        DDD.value = binding.value\n        DDD.List = list\n        DDD.className = binding.value.className\n        DDD.KEY_MAP[binding.value.key] = item\n\n        el.setAttribute('draggable', 'true')\n        el.setAttribute('drag_group', binding.value.group)\n        el.setAttribute('drag_block', binding.value.group)\n        el.setAttribute('drag_key', binding.value.key)\n\n        _.on(el, 'dragstart', handleDragStart)\n        _.on(el, 'dragenter', handleDragEnter)\n        _.on(el, 'dragover', handleDragOver)\n        _.on(el, 'drag', handleDrag)\n        _.on(el, 'dragleave', handleDragLeave)\n        _.on(el, 'dragend', handleDragEnd)\n        _.on(el, 'drop', handleDrop)\n\n        _.on(el, 'touchstart', handleDragStart)\n        _.on(el, 'touchmove', handleDragEnter)\n        _.on(el, 'touchend', handleDragEnd)\n    }\n\n    function removeDragItem (el, binding, vnode) {\n        const DDD = dragData.new(binding.value.group)\n        DDD.KEY_MAP[binding.value.key] = undefined\n        _.off(el, 'dragstart', handleDragStart)\n        _.off(el, 'dragenter', handleDragEnter)\n        _.off(el, 'dragover', handleDragOver)\n        _.off(el, 'drag', handleDrag)\n        _.off(el, 'dragleave', handleDragLeave)\n        _.off(el, 'dragend', handleDragEnd)\n        _.off(el, 'drop', handleDrop)\n\n        _.off(el, 'touchstart', handleDragStart)\n        _.off(el, 'touchmove', handleDragEnter)\n        _.off(el, 'touchend', handleDragEnd)\n    }\n\n    Vue.prototype.$dragging = $dragging\n    if (!isPreVue) {\n        Vue.directive('dragging', {\n            bind: addDragItem,\n            update(el, binding) {\n                const DDD = dragData.new(binding.value.group)\n                const item = binding.value.item\n                const old_item = DDD.KEY_MAP[binding.value.key]\n                if (old_item !== item) {\n                    DDD.KEY_MAP[binding.value.key] = item\n                }\n            },\n            unbind : removeDragItem\n        })\n    } else {\n        Vue.directive('dragging', {\n            update (newValue, oldValue) {\n                addDragItem(this.el, {\n                    modifiers: this.modifiers,\n                    arg: this.arg,\n                    value: newValue,\n                    oldValue: oldValue\n                })\n            },\n            unbind (newValue, oldValue) {\n                removeDragItem(this.el, {\n                    modifiers: this.modifiers,\n                    arg: this.arg,\n                    value: newValue?newValue:{group: this.el.getAttribute('drag_group')},\n                    oldValue: oldValue\n                })\n            }\n        })\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./vue-dragging.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}